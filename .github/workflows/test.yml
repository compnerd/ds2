name: test

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:


jobs:
  # Test the Android ds2 binary on an emulator.
  android-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # We don't currently have a good way of running arm64-v8a tests on the
        # available GitHub test runners.
        abi: ['x86_64']

    env:
      ANDROID_API_LEVEL: 28
      DEBUG_PORT: 5432
      SCCACHE_DIRECT: yes

    steps:
      - uses: actions/checkout@v4
      - uses: seanmiddleditch/gha-setup-ninja@v5

      # Free up some disk space by removing some things we don't use. Without
      # this step, we exhaust disk space while installing Android the emulator
      # image in the setup-ndk step below. The list of packages sorted by on
      # disk size can be generated by running the command:
      #
      #     dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
      #
      - name: free-up disk space
        run: |
          df -h /home
          sudo apt purge -q aspnetcore-* \
                            azure-* \
                            containerd.io \
                            containernetworking-plugins \
                            docker-ce* \
                            dotnet-* \
                            firefox \
                            gfortran-* \
                            google-chrome-stable \
                            google-cloud-cli* \
                            kubectl \
                            linux-azure-* \
                            linux-modules-*-azure \
                            microsoft-edge-stable \
                            mono-* \
                            monodoc-* \
                            msbuild \
                            mysql-* \
                            podman \
                            postgresql-* \
                            powershell \
                            r-base-core \
                            vim-runtime
          sudo apt autoremove
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /var/lib/docker
          sudo rm -rf /usr/share/swift
          df -h /home

      # Cross-compile ds2 for Android. Cmake finds the Android NDK from
      # ANDROID_NDK in the environment, which is pre-installed and configured
      # in the test runner image.
      - name: Configure ds2 NDK build
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2                    \
                -D CMAKE_BUILD_TYPE=Release                                   \
                -D CMAKE_SYSTEM_NAME=Android                                  \
                -D CMAKE_ANDROID_ARCH_ABI=${{ matrix.abi }}                   \
                -G Ninja
      - name: Build ds2
        run: |
          cmake --build ${{ github.workspace }}/BinaryCache/ds2               \
                --config Release

      - name: Setup sccache
        uses: hendrikmuhs/ccache-action@2e0e89e8d74340a03f75d58d02aae4c5ee1b15c6
        with:
          key: ubuntu-${{ matrix.arch }}-llvm
          variant: sccache
          append-timestamp: false

      # Build clang and a Python-enabled lldb binary to execute the lldb tests.
      - uses: actions/checkout@v4
        name: checkout llvm project
        with:
          repository: llvm/llvm-project
          ref: main
          path: ${{ github.workspace }}/llvm-project
      - name: Configure lldb build
        run: |
          cmake -B ${{ github.workspace }}/llvm-project/build                   \
                -S ${{ github.workspace }}/llvm-project/llvm                    \
                -D LLVM_ENABLE_PROJECTS='clang;lldb'                            \
                -D LLVM_TARGETS_TO_BUILD="X86"                                  \
                -D LLDB_ENABLE_PYTHON=On                                        \
                -D CMAKE_C_COMPILER_LAUNCHER=sccache                            \
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache                          \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -G Ninja
      - name: Build lldb
        run: |
          cmake --build  ${{ github.workspace }}/llvm-project/build             \
                --target tools/lldb/test/API/lldb-api-test-deps                 \
                --config Release

      # Run a subset of the lldb API tests against ds2 runnint on an x86_64
      # Android emulator.
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          # NOTE: because of structural changes and the remvoal of gcc, Android
          # NDK r21e is the last NDK version that the lldb API tests can build
          # test binaries against. The lldb test framework will need to be
          # modified to run with a more recent NDK.
          ndk-version: r21e
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: launch ds2 on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          arch: ${{ matrix.abi }}
          emulator-options: -no-window -noaudio -no-boot-anim
          disk-size: 2048M
          script: |
            $ANDROID_SDK_ROOT/platform-tools/adb forward tcp:${{ env.DEBUG_PORT }} tcp:${{ env.DEBUG_PORT }}
            $ANDROID_SDK_ROOT/platform-tools/adb push ${{ github.workspace }}/BinaryCache/ds2/ds2 /data/local/tmp
            $ANDROID_SDK_ROOT/platform-tools/adb shell "chmod +x /data/local/tmp/ds2"
            $ANDROID_SDK_ROOT/platform-tools/adb shell "/data/local/tmp/ds2 platform --server --daemonize --listen localhost:${{ env.DEBUG_PORT}} --log-file=/data/local/tmp/ds2.log"
            ${{ github.workspace }}/llvm-project/build/bin/lldb-dotest --out-of-tree-debugserver --arch ${{ matrix.abi }} --platform-name remote-android --platform-url connect://localhost:${{ env.DEBUG_PORT }} --platform-working-dir /data/local/tmp --compiler=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang ${{ github.workspace }}/llvm-project/lldb/test/API/api
            $ANDROID_SDK_ROOT/platform-tools/adb pull /data/local/tmp/ds2.log ${{ github.workspace }}/BinaryCache/ds2/

      # Upload the device-side ds2 logs generated during the test run.
      - uses: actions/upload-artifact@v4
        with:
          name: lldb-dotest-android-${{ matrix.abi }}-ds2.log
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/ds2.log
