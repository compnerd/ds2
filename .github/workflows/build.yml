name: Build and Test

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  workflow_call:

env:
  LLVM_REF: ca102b2114fa8a00096d71ff9fc3b1b218f0f01a
  SCCACHE_DIRECT: yes

jobs:

  windows_tools:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: compnerd/gha-setup-vsdevenv@main

      - name: Install Build Tools
        run: choco install winflexbison3

      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/RegsGen2 `
                -C ${{ github.workspace }}/cmake/caches/MSVCWarnings.cmake `
                -G "Visual Studio 17 2022" `
                -A x64 `
                -S ${{ github.workspace }}/Tools/RegsGen2
      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/RegsGen2 --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: windows-regsgen2
          path: |
            ${{ github.workspace }}/BinaryCache/RegsGen2/Release/regsgen2.exe

  windows:
    needs: [windows_tools]
    runs-on: windows-latest

    strategy:
      matrix:
        arch: ['Win32', 'x64'] # ['ARM', 'ARM64']

    steps:
      - uses: actions/checkout@v4

      - name: Install Build Tools
        run: choco install winflexbison3

      - uses: actions/download-artifact@v4
        with:
          name: windows-regsgen2
          path: ${{ github.workspace }}/BinaryCache/RegsGen2/Release

      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2 `
                -C ${{ github.workspace }}/cmake/caches/MSVCWarnings.cmake `
                -G "Visual Studio 17 2022" `
                -A ${{ matrix.arch }} `
                -D DS2_REGSGEN2=${{ github.workspace }}/BinaryCache/RegsGen2/Release/regsgen2.exe `
                -S ${{ github.workspace }}
      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/Release/ds2.exe


  mingw:
    needs: [windows_tools]
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false
      matrix:
        include:
          - { system: ucrt64, env: ucrt-x86_64 }
          - { system: clang64, env: clang-x86_64 }

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.system }}
          install: >-
            flex
            bison
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-toolchain
            mingw-w64-${{ matrix.env }}-ninja

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: windows-regsgen2
          path: ${{ github.workspace }}/BinaryCache/RegsGen2/Release

      - name: Configure
        run: |
          cmake -B $(cygpath -u '${{ github.workspace }}/BinaryCache/ds2')      \
                -C $(cygpath -u '${{ github.workspace }}/cmake/caches/GNUWarnings.cmake') \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -G Ninja                                                        \
                -D DS2_REGSGEN2=$(cygpath -u '${{ github.workspace }}/BinaryCache/RegsGen2/Release/regsgen2.exe') \
                -S $(cygpath -u '${{ github.workspace }}')
      - name: Build
        run: cmake --build $(cygpath -u '${{ github.workspace }}/BinaryCache/ds2') --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: mingw-${{ matrix.system }}-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/ds2.exe

  macos:
    # The macos-latest runner image runs on an M1 ARM CPU which is not currently
    # supported by ds2. Build on macos-13, which is x86_64-based, until Darwin
    # on ARM support is implemented.
    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2                      \
                -C ${{ github.workspace }}/cmake/caches/ClangWarnings.cmake     \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -G Ninja                                                        \
                -S ${{ github.workspace }}
      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: macOS-x86_64-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/ds2

  linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - { processor: x86_64, cflags: "", cxxflags: "" }
          - { processor: i686, cflags: "-m32", cxxflags: "-m32" }

    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get update
          sudo apt-get install -qq --no-install-recommends bison flex gcc-multilib g++-multilib ninja-build

      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2                      \
                -C ${{ github.workspace }}/cmake/caches/GNUWarnings.cmake       \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -D CMAKE_SYSTEM_NAME=Linux                                      \
                -D CMAKE_SYSTEM_PROCESSOR=${{ matrix.processor }}               \
                -D CMAKE_C_FLAGS=${{ matrix.cflags }}                           \
                -D CMAKE_CXX_FLAGS=${{ matrix.cxxflags }}                       \
                -G Ninja                                                        \
                -S ${{ github.workspace }}
      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release

      # Tar the output to preserve permissions.
      - name: tar output
        run: tar -C ${{ github.workspace }}/BinaryCache -cvf ${{ github.workspace }}/BinaryCache/ds2.tar ds2

      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.processor }}-ds2
          path: ${{ github.workspace }}/BinaryCache/ds2.tar

  freebsd:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        processor: [ x86_64 ]

    steps:
      - uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/SourceCache/ds2

      - uses: vmactions/freebsd-vm@v1
        name: Build on FreeBSD VM
        with:
          prepare: |
            pkg install -y cmake bison flex ninja

          run: |
            cmake -B ${{ github.workspace }}/BinaryCache/ds2                  \
                  -D CMAKE_BUILD_TYPE=Release                                 \
                  -D CMAKE_SYSTEM_NAME=FreeBSD                                \
                  -D CMAKE_SYSTEM_PROCESSOR=${{ matrix.processor }}           \
                  -G Ninja                                                    \
                  -S ${{ github.workspace }}/SourceCache/ds2
            cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release
            tar -C ${{ github.workspace }}/BinaryCache -cvf ${{ github.workspace }}/BinaryCache/ds2.tar ds2

      - uses: actions/upload-artifact@v4
        with:
          name: freebsd-${{ matrix.processor }}-ds2
          path: ${{ github.workspace }}/BinaryCache/ds2.tar

  # Cross-compile for Android on a Windows host.
  android-windows-ndk:
    needs: [windows_tools]
    runs-on: windows-latest

    strategy:
      matrix:
        abi: ['x86_64', 'x86', 'arm64-v8a', 'armeabi-v7a']

    steps:
      - uses: actions/checkout@v4
      - uses: seanmiddleditch/gha-setup-ninja@master
      - uses: actions/download-artifact@v4
        with:
          name: windows-regsgen2
          path: ${{ github.workspace }}/BinaryCache/RegsGen2/Release

      - name: Install Build Tools
        run: choco install winflexbison3

      # cmake finds the Android NDK from ANDROID_NDK in the environment, which
      # is pre-installed and configured in the Windows runner image.
      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2 `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_SYSTEM_NAME=Android `
                -D CMAKE_ANDROID_ARCH_ABI=${{ matrix.abi }} `
                -D DS2_REGSGEN2=${{ github.workspace }}/BinaryCache/RegsGen2/Release/regsgen2.exe `
                -G Ninja

      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release

      # Tar the output to preserve permissions.
      - name: tar output
        run: tar -C ${{ github.workspace }}/BinaryCache -cvf ${{ github.workspace }}/BinaryCache/ds2.tar ds2

      - uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.abi }}-ds2
          path: ${{ github.workspace }}/BinaryCache/ds2.tar

  linux-lldb:
    runs-on: ubuntu-latest

    steps:
      - uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Setup sccache
        uses: hendrikmuhs/ccache-action@2e0e89e8d74340a03f75d58d02aae4c5ee1b15c6
        with:
          key: llvm-${{ runner.os }}-${{ runner.arch }}
          variant: sccache

      - name: Checkout llvm project
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_REF }}
          path: ${{ github.workspace }}/SourceCache/llvm

      # Build clang and a Python-enabled lldb binary to execute the lldb tests
      - name: Configure lldb build
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/llvm                     \
                -S ${{ github.workspace }}/SourceCache/llvm/llvm                \
                -D LLVM_ENABLE_PROJECTS='clang;lldb'                            \
                -D LLVM_TARGETS_TO_BUILD="X86"                                  \
                -D LLDB_ENABLE_PYTHON=On                                        \
                -D CMAKE_C_COMPILER_LAUNCHER=sccache                            \
                -D CMAKE_CXX_COMPILER_LAUNCHER=sccache                          \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -G Ninja

      - name: Build llvm
        run: |
          cmake --build  ${{ github.workspace }}/BinaryCache/llvm               \
                --target tools/lldb/test/API/lldb-api-test-deps                 \
                --config Release

      # Tar the build output to preserve permissions.
      - name: tar output
        run: tar -C ${{ github.workspace }}/BinaryCache -cvf ${{ github.workspace }}/BinaryCache/llvm.tar llvm

      - uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ runner.os }}-${{ runner.arch }}
          path: ${{ github.workspace }}/BinaryCache/llvm.tar

  test-linux:
    needs: [linux, linux-lldb]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        processor: [x86_64, i686]

    steps:
      - run: |
          sudo apt-get update
          sudo apt-get install -qq --no-install-recommends gcc-multilib g++-multilib

      - uses: actions/download-artifact@v4
        with:
          name: llvm-${{ runner.os }}-${{ runner.arch }}
          path: ${{ github.workspace }}/BinaryCache
      - name: untar llvm artifacts
        run: |
          tar -C ${{ github.workspace }}/BinaryCache -xvf ${{ github.workspace }}/BinaryCache/llvm.tar

      - uses: actions/download-artifact@v4
        with:
          name: linux-${{ matrix.processor }}-ds2
          path: ${{ github.workspace }}/BinaryCache
      - name: untar ds2 artifacts
        run: |
          tar -C ${{ github.workspace }}/BinaryCache -xvf ${{ github.workspace }}/BinaryCache/ds2.tar

      - name: Checkout llvm project
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_REF }}
          path: ${{ github.workspace }}/SourceCache/llvm

      - name: Checkout ds2
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/SourceCache/ds2

      - run: |
          ${{ github.workspace }}/BinaryCache/ds2/ds2 platform --server --daemonize --listen localhost:5432
          ${{ github.workspace }}/BinaryCache/llvm/bin/lldb-dotest              \
              --out-of-tree-debugserver                                         \
              --arch ${{ matrix.processor }}                                    \
              --platform-name remote-linux                                      \
              --platform-url connect://localhost:5432                           \
              ${{ github.workspace }}/SourceCache/llvm/lldb/test/API/api

  test-android:
    needs: [android-windows-ndk, linux-lldb]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # We don't currently have a good way to run arm64 Android emulator on
        # the available GitHub test runners.
        include:
          - test-category: misc
            processor: x86_64
            api-level: 28
            test-subdirs: >-
              SourceCache/llvm/lldb/test/API/android
              SourceCache/llvm/lldb/test/API/api
              SourceCache/llvm/lldb/test/API/lang
              SourceCache/llvm/lldb/test/API/linux
              SourceCache/llvm/lldb/test/API/tools
              SourceCache/llvm/lldb/test/API/sanity
              SourceCache/llvm/lldb/test/API/types

          - test-category: commands
            processor: x86_64
            api-level: 28
            test-subdirs: >-
              SourceCache/llvm/lldb/test/API/commands

          - test-category: Python API
            processor: x86_64
            api-level: 28
            test-subdirs: >-
              SourceCache/llvm/lldb/test/API/python_api

          - test-category: functionalities
            processor: x86_64
            api-level: 28
            test-subdirs: >-
              SourceCache/llvm/lldb/test/API/functionalities

    name: Android ${{ matrix.processor }} test ${{ matrix.test-category}}

    steps:
      # Free up some disk space by removing some things we don't use. Without
      # this step, we exhaust disk space while installing Android the emulator
      # image in the setup-ndk step below. The list of packages sorted by on
      # disk size can be generated by running the command:
      #
      #     dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
      #
      - name: free-up disk space
        run: |
          df -h /home
          sudo apt purge -q aspnetcore-* \
                            azure-* \
                            containerd.io \
                            containernetworking-plugins \
                            docker-ce* \
                            dotnet-* \
                            firefox \
                            gfortran-* \
                            google-chrome-stable \
                            google-cloud-cli* \
                            kubectl \
                            linux-azure-* \
                            linux-modules-*-azure \
                            microsoft-edge-stable \
                            mono-* \
                            monodoc-* \
                            msbuild \
                            mysql-* \
                            podman \
                            postgresql-* \
                            powershell \
                            r-base-core \
                            vim-runtime
          sudo apt autoremove
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /var/lib/docker
          sudo rm -rf /usr/share/swift
          df -h /home

      - uses: actions/download-artifact@v4
        with:
          name: llvm-${{ runner.os }}-${{ runner.arch }}
          path: ${{ github.workspace }}/BinaryCache
      - name: untar llvm artifacts
        run: |
          tar -C ${{ github.workspace }}/BinaryCache -xvf ${{ github.workspace }}/BinaryCache/llvm.tar

      - uses: actions/download-artifact@v4
        with:
          name: android-${{ matrix.processor }}-ds2
          path: ${{ github.workspace }}/BinaryCache
      - name: untar ds2 artifacts
        run: |
          tar -C ${{ github.workspace }}/BinaryCache -xvf ${{ github.workspace }}/BinaryCache/ds2.tar

      - name: Checkout llvm project
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_REF }}
          path: ${{ github.workspace }}/SourceCache/llvm

      - name: Checkout ds2
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/SourceCache/ds2

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          # NOTE: because of structural changes and the remvoal of gcc, Android
          # NDK r21e is the last NDK version that the lldb API tests can build
          # test binaries against. The lldb test framework will need to be
          # modified to run with a more recent NDK.
          ndk-version: r21e
          local-cache: true

      # Cache the contents of $HOME/.android which contains emulators,
      # snapshots, and adb state.
      - name: Setup AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: ~/.android/**
          key: avd-${{ runner.os }}-${{ matrix.processor }}-${{ matrix.api-level }}

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.processor }}
          force-avd-creation: false
          emulator-options: -no-window -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run lldb tests against ds2 on Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.processor }}
          force-avd-creation: false
          # NOTE: -no-snapshot will not load or save state and the emulator will
          # cold boot. Ideally, we would specify -no-snapshot-save instead so it
          # would load the snapshot created in the caching step (but not save a
          # new one). However, doing that causes the emulator to hang during
          # shutdown. We're still saving time by reusing the device created in
          # the caching step and not wiping userdata on boot.
          emulator-options: -no-snapshot -no-window -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: >
            $ANDROID_SDK_ROOT/platform-tools/adb forward tcp:5432 tcp:5432

            $ANDROID_SDK_ROOT/platform-tools/adb push "${{ github.workspace }}/BinaryCache/ds2/ds2" /data/local/tmp

            $ANDROID_SDK_ROOT/platform-tools/adb shell "chmod +x /data/local/tmp/ds2"

            $ANDROID_SDK_ROOT/platform-tools/adb shell "/data/local/tmp/ds2 platform --server --daemonize --listen localhost:5432"

            ${{ github.workspace }}/BinaryCache/llvm/bin/lldb-dotest
            --out-of-tree-debugserver
            --arch ${{ matrix.processor}}
            --platform-name remote-android
            --platform-url connect://localhost:5432
            --platform-working-dir /data/local/tmp
            --compiler=${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang
            --excluded ${{ github.workspace }}/SourceCache/ds2/Support/Testing/Excluded/ds2/android-${{ matrix.processor }}.excluded
            --excluded ${{ github.workspace }}/SourceCache/ds2/Support/Testing/Excluded/upstream/android-${{ matrix.processor }}.excluded
            --excluded ${{ github.workspace }}/SourceCache/ds2/Support/Testing/Excluded/upstream/non-debugserver-tests.excluded
            ${{ matrix.test-subdirs }}
