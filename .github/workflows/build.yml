name: build

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  windows:
    runs-on: windows-latest

    strategy:
      matrix:
        arch: ['Win32', 'x64'] # ['ARM', 'ARM64']

    steps:
      - uses: actions/checkout@v4

      - name: Install Build Tools
        run: choco install winflexbison3

      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2 `
                -C ${{ github.workspace }}/cmake/caches/MSVCWarnings.cmake `
                -D CMAKE_BUILD_TYPE=Release `
                -G "Visual Studio 17 2022" `
                -A ${{ matrix.arch }} `
                -S ${{ github.workspace }}
      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/Release/ds2.exe


  mingw:
    runs-on: windows-latest

    defaults:
      run:
        shell: msys2 {0}

    strategy:
      fail-fast: false
      matrix:
        include:
          - { system: ucrt64, env: ucrt-x86_64 }
          - { system: clang64, env: clang-x86_64 }

    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.system }}
          install: >-
            flex
            bison
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-toolchain
            mingw-w64-${{ matrix.env }}-ninja

      - uses: actions/checkout@v4

      - name: Configure
        run: |
          cmake -B $(cygpath -u '${{ github.workspace }}/BinaryCache/ds2')      \
                -C $(cygpath -u '${{ github.workspace }}/cmake/caches/GNUWarnings.cmake') \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -G Ninja                                                        \
                -S $(cygpath -u '${{ github.workspace }}')
      - name: Build
        run: cmake --build $(cygpath -u '${{ github.workspace }}/BinaryCache/ds2') --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: mingw-${{ matrix.system }}-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/ds2.exe

  macos:
    # The macos-latest runner image runs on an M1 ARM CPU which is not currently
    # supported by ds2. Build on macos-13, which is x86_64-based, until Darwin
    # on ARM support is implemented.
    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2                      \
                -C ${{ github.workspace }}/cmake/caches/ClangWarnings.cmake     \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -G Ninja                                                        \
                -S ${{ github.workspace }}
      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: macOS-x86_64-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/ds2

  linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - { processor: x86_64, cflags: "", cxxflags: "" }
          - { processor: i686, cflags: "-m32", cxxflags: "-m32" }

    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get update
          sudo apt-get install -qq --no-install-recommends bison flex gcc-multilib g++-multilib ninja-build

      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2                      \
                -C ${{ github.workspace }}/cmake/caches/GNUWarnings.cmake       \
                -D CMAKE_BUILD_TYPE=Release                                     \
                -D CMAKE_SYSTEM_NAME=Linux                                      \
                -D CMAKE_SYSTEM_PROCESSOR=${{ matrix.processor }}               \
                -D CMAKE_C_FLAGS=${{ matrix.cflags }}                           \
                -D CMAKE_CXX_FLAGS=${{ matrix.cxxflags }}                       \
                -G Ninja                                                        \
                -S ${{ github.workspace }}
      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Releaase

      - uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.processor }}-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/ds2

  # Cross-compile for Android on a Windows host.
  android-windows-ndk:
    runs-on: windows-latest

    strategy:
      matrix:
        abi: ['x86_64', 'x86', 'arm64-v8a', 'armeabi-v7a']

    steps:
      - uses: actions/checkout@v4
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install Build Tools
        run: choco install winflexbison3

      # cmake finds the Android NDK from ANDROID_NDK in the environment, which
      # is pre-installed and configured in the Windows runner image.
      - name: Configure
        run: |
          cmake -B ${{ github.workspace }}/BinaryCache/ds2 `
                -D CMAKE_BUILD_TYPE=Release `
                -D CMAKE_SYSTEM_NAME=Android `
                -D CMAKE_ANDROID_ARCH_ABI=${{ matrix.abi }} `
                -G Ninja

      - name: Build
        run: cmake --build ${{ github.workspace }}/BinaryCache/ds2 --config Release

      - uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.abi }}-ds2
          path: |
            ${{ github.workspace }}/BinaryCache/ds2/ds2
