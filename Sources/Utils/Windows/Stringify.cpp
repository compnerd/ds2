//
// Copyright (c) 2014-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the University of Illinois/NCSA Open
// Source License found in the LICENSE file in the root directory of this
// source tree. An additional grant of patent rights can be found in the
// PATENTS file in the same directory.
//

#define STRINGIFY_H_INTERNAL
#include "DebugServer2/Utils/Stringify.h"
#include "DebugServer2/Host/Windows/ExtraWrappers.h"

namespace ds2 {
namespace Utils {

char const *Stringify::WSAError(DWORD error) {
  switch (error) {
    DO_STRINGIFY(WSAEINTR)
    DO_STRINGIFY(WSAEBADF)
    DO_STRINGIFY(WSAEACCES)
    DO_STRINGIFY(WSAEFAULT)
    DO_STRINGIFY(WSAEINVAL)
    DO_STRINGIFY(WSAEMFILE)
    DO_STRINGIFY(WSAEWOULDBLOCK)
    DO_STRINGIFY(WSAEINPROGRESS)
    DO_STRINGIFY(WSAEALREADY)
    DO_STRINGIFY(WSAENOTSOCK)
    DO_STRINGIFY(WSAEDESTADDRREQ)
    DO_STRINGIFY(WSAEMSGSIZE)
    DO_STRINGIFY(WSAEPROTOTYPE)
    DO_STRINGIFY(WSAENOPROTOOPT)
    DO_STRINGIFY(WSAEPROTONOSUPPORT)
    DO_STRINGIFY(WSAESOCKTNOSUPPORT)
    DO_STRINGIFY(WSAEOPNOTSUPP)
    DO_STRINGIFY(WSAEPFNOSUPPORT)
    DO_STRINGIFY(WSAEAFNOSUPPORT)
    DO_STRINGIFY(WSAEADDRINUSE)
    DO_STRINGIFY(WSAEADDRNOTAVAIL)
    DO_STRINGIFY(WSAENETDOWN)
    DO_STRINGIFY(WSAENETUNREACH)
    DO_STRINGIFY(WSAENETRESET)
    DO_STRINGIFY(WSAECONNABORTED)
    DO_STRINGIFY(WSAECONNRESET)
    DO_STRINGIFY(WSAENOBUFS)
    DO_STRINGIFY(WSAEISCONN)
    DO_STRINGIFY(WSAENOTCONN)
    DO_STRINGIFY(WSAESHUTDOWN)
    DO_STRINGIFY(WSAETOOMANYREFS)
    DO_STRINGIFY(WSAETIMEDOUT)
    DO_STRINGIFY(WSAECONNREFUSED)
    DO_STRINGIFY(WSAELOOP)
    DO_STRINGIFY(WSAENAMETOOLONG)
    DO_STRINGIFY(WSAEHOSTDOWN)
    DO_STRINGIFY(WSAEHOSTUNREACH)
    DO_STRINGIFY(WSAENOTEMPTY)
    DO_STRINGIFY(WSAEPROCLIM)
    DO_STRINGIFY(WSAEUSERS)
    DO_STRINGIFY(WSAEDQUOT)
    DO_STRINGIFY(WSAESTALE)
    DO_STRINGIFY(WSAEREMOTE)
    DO_STRINGIFY(WSAEDISCON)
    DO_STRINGIFY(WSASYSNOTREADY)
    DO_STRINGIFY(WSAVERNOTSUPPORTED)
    DO_STRINGIFY(WSANOTINITIALISED)
    DO_STRINGIFY(WSAHOST_NOT_FOUND)
    DO_STRINGIFY(WSATRY_AGAIN)
    DO_STRINGIFY(WSANO_RECOVERY)
    DO_STRINGIFY(WSANO_DATA)
#if !defined(PLATFORM_MINGW)
    DO_STRINGIFY(WSA_SECURE_HOST_NOT_FOUND)
    DO_STRINGIFY(WSA_IPSEC_NAME_POLICY_ERROR)
#endif // !PLATFORM_MINGW
    DO_DEFAULT("unknown WSA error", error);
  }
}

char const *Stringify::DebugEvent(DWORD event) {
  switch (event) {
    DO_STRINGIFY(EXCEPTION_DEBUG_EVENT)
    DO_STRINGIFY(CREATE_THREAD_DEBUG_EVENT)
    DO_STRINGIFY(CREATE_PROCESS_DEBUG_EVENT)
    DO_STRINGIFY(EXIT_THREAD_DEBUG_EVENT)
    DO_STRINGIFY(EXIT_PROCESS_DEBUG_EVENT)
    DO_STRINGIFY(LOAD_DLL_DEBUG_EVENT)
    DO_STRINGIFY(UNLOAD_DLL_DEBUG_EVENT)
    DO_STRINGIFY(OUTPUT_DEBUG_STRING_EVENT)
    DO_STRINGIFY(RIP_EVENT)
    DO_DEFAULT("unknown debug event", event)
  }
}

char const *Stringify::ExceptionCode(DWORD code) {
  switch (code) {
    DO_STRINGIFY(STATUS_ACCESS_VIOLATION)
    DO_STRINGIFY(STATUS_ARRAY_BOUNDS_EXCEEDED)
    DO_STRINGIFY(STATUS_BREAKPOINT)
    DO_STRINGIFY(STATUS_DATATYPE_MISALIGNMENT)
    DO_STRINGIFY(STATUS_FLOAT_DENORMAL_OPERAND)
    DO_STRINGIFY(STATUS_FLOAT_DIVIDE_BY_ZERO)
    DO_STRINGIFY(STATUS_FLOAT_INEXACT_RESULT)
    DO_STRINGIFY(STATUS_FLOAT_INVALID_OPERATION)
    DO_STRINGIFY(STATUS_FLOAT_OVERFLOW)
    DO_STRINGIFY(STATUS_FLOAT_STACK_CHECK)
    DO_STRINGIFY(STATUS_FLOAT_UNDERFLOW)
    DO_STRINGIFY(STATUS_ILLEGAL_INSTRUCTION)
    DO_STRINGIFY(STATUS_INTEGER_DIVIDE_BY_ZERO)
    DO_STRINGIFY(STATUS_INTEGER_OVERFLOW)
    DO_STRINGIFY(STATUS_INVALID_DISPOSITION)
    DO_STRINGIFY(STATUS_IN_PAGE_ERROR)
    DO_STRINGIFY(STATUS_NONCONTINUABLE_EXCEPTION)
    DO_STRINGIFY(STATUS_PRIVILEGED_INSTRUCTION)
    DO_STRINGIFY(STATUS_SINGLE_STEP)
    DO_STRINGIFY(STATUS_STACK_BUFFER_OVERRUN)
    DO_STRINGIFY(STATUS_STACK_OVERFLOW)
  case DS2_EXCEPTION_UNCAUGHT_COM:
    return "0x800706BA (uncaught COM exception)";
  case DS2_EXCEPTION_UNCAUGHT_USER:
    return "0xE06D7363 (uncaught user exception)";
  case DS2_EXCEPTION_UNCAUGHT_WINRT:
    return "0x40080201 (uncaught WinRT exception)";
  case DS2_EXCEPTION_VC_THREAD_NAME_SET:
    return "0x406D1388 (VC thread name set)";
    DO_DEFAULT("unknown exception code", code)
  }
}
} // namespace Utils
} // namespace ds2
